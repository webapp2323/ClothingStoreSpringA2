--liquibase formatted sql

--changeset Owl:init_script_DB
--preconditions onFail:MARK_RAN

--precondition-sql-check expectedResult:0 SELECT count(*) FROM information_schema.tables WHERE table_name = 'jacket';

CREATE TABLE IF NOT EXISTS jacket (
                                      id SERIAL PRIMARY KEY,
                                      name VARCHAR(255) NOT NULL,
                                      size VARCHAR(50) NOT NULL,
                                      color VARCHAR(50),
                                      price NUMERIC(10, 2) NOT NULL,
                                      material VARCHAR(50) NOT NULL,
                                      hasHood BOOLEAN NOT NULL
);

INSERT INTO jacket (name, size, color, price, material, hasHood) VALUES
     ('Light Jacket', 'M', 'Blue', 89.99, 'POLYESTER', false), ('Winter Jacket', 'L', 'Black', 129.99, 'COTTON', true), ('Leather Jacket', 'S', 'Brown', 343.00, 'LEATHER', false),('Windbreaker', 'XL', 'Red', 59.99, 'NYLON', true),('Denim Jacket', 'M', 'Dark Blue', 79.99, 'DENIM', false);

CREATE TABLE IF NOT EXISTS pants (
                                     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     name VARCHAR(255) NOT NULL,
                                     brand VARCHAR(255) NOT NULL,
                                     price NUMERIC(10, 2) NOT NULL,
                                     size VARCHAR(50) NOT NULL,
                                     material VARCHAR(50) NOT NULL
);

INSERT INTO pants (name, brand, price, size, material) VALUES
('Casual Pants', 'Brand A', 39.99, 'M', 'COTTON'),         ('Formal Pants', 'Brand B', 59.99, 'L', 'POLYESTER'),     ('Sport Pants', 'Brand C', 49.99, 'S', 'DENIM'),           ('Winter Pants', 'Brand D', 79.99, 'XL', 'COTTON'),        ('Chino Pants', 'Brand E', 45.00, 'M', 'COTTON');

CREATE TABLE IF NOT EXISTS shirt (
                                     id SERIAL PRIMARY KEY,
                                     name VARCHAR(255) NOT NULL,
                                     brand VARCHAR(255) NOT NULL,
                                     price NUMERIC(10, 2) NOT NULL,
                                     size VARCHAR(20) NOT NULL,
                                     material VARCHAR(255) NOT NULL,
                                     sleeve_type VARCHAR(100) NOT NULL
);

INSERT INTO shirt (name, brand, price, sleeve_type, size, material) VALUES
('Casual Shirt', 'Brand A', 29.99, 'LONG', 'M', 'COTTON'), ('Formal Shirt', 'Brand B', 49.99, 'SHORT', 'L', 'POLYESTER'), ('T-Shirt', 'Brand C', 19.99, 'SLEEVELESS', 'S', 'NYLON'),('Polo Shirt', 'Brand D', 35.00, 'SHORT', 'XL', 'DENIM'),            ('Dress Shirt', 'Brand E', 59.99, 'LONG', 'M', 'WOOL'),('Lightweight Shirt', 'Brand F', 24.99, 'LONG', 'S', 'LINEN'),                                            ('Business Casual Shirt', 'Brand G', 45.00, 'SHORT', 'M', 'COTTON'),('Graphic Tee', 'Brand H', 15.99, 'SLEEVELESS', 'L', 'COTTON'),('Classic Polo', 'Brand I', 32.50, 'SHORT', 'XL', 'POLYESTER'),                     ('Evening Dress Shirt', 'Brand J', 67.49, 'LONG', 'L', 'VINYL');


CREATE TABLE IF NOT EXISTS store (
                                     id SERIAL PRIMARY KEY,
                                     name VARCHAR(255) NOT NULL UNIQUE, -- Название магазина должно быть уникальным и не NULL
                                     location VARCHAR(255) NOT NULL,     -- Местоположение магазина обязательно
                                     contact_email VARCHAR(255) NOT NULL UNIQUE, -- Контактный email должен быть уникальным и не NULL
                                     established_date DATE CHECK (established_date <= CURRENT_DATE) -- Дата основания не может быть в будущем
);

CREATE TABLE IF NOT EXISTS "user" (
                                      id SERIAL PRIMARY KEY,
                                      username VARCHAR(255) NOT NULL UNIQUE,
                                      password VARCHAR(255) NOT NULL,
                                      email VARCHAR(255) NOT NULL UNIQUE,
                                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- DEFAULT отвечает за то, какое значение будет по умолчанию
);

CREATE TABLE IF NOT EXISTS role (
                                    id SERIAL PRIMARY KEY,
                                    name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS user_role (
                                         user_id INTEGER NOT NULL,
                                         role_id INTEGER NOT NULL,
                                         PRIMARY KEY (user_id, role_id),
                                         FOREIGN KEY (user_id) REFERENCES "user"(id),
                                         FOREIGN KEY (role_id) REFERENCES role(id)
);


CREATE TABLE IF NOT EXISTS orders (
                                      id BIGSERIAL PRIMARY KEY,
                                      customer_name VARCHAR(255) NOT NULL,
                                      total_amount DECIMAL(10, 2) NOT NULL,
                                      status VARCHAR(50) NOT NULL DEFAULT 'PENDING'
);

INSERT INTO orders (customer_name, total_amount, status) VALUES
                                                             ('John Doe', 100.50, 'PENDING'),
                                                             ('Jane Smith', 250.00, 'COMPLETED'),
                                                             ('Alice Johnson', 75.25, 'PENDING'),
                                                             ('Bob Brown', 300.00, 'SHIPPED'),
                                                             ('Charlie Black', 150.75, 'PENDING');

CREATE TABLE IF NOT EXISTS payments (
                                        id BIGSERIAL PRIMARY KEY,
                                        order_id BIGINT NOT NULL,
                                        amount DECIMAL(10, 2) NOT NULL,
                                        method VARCHAR(50) NOT NULL,
                                        payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                        FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE
);

INSERT INTO payments (order_id, amount, method) VALUES
                                                    (1, 100.50, 'CREDIT_CARD'),
                                                    (2, 250.00, 'PAYPAL'),
                                                    (3, 75.25, 'BANK_TRANSFER'),
                                                    (4, 300.00, 'DEBIT_CARD'),
                                                    (5, 150.75, 'CASH');
INSERT INTO store (name, location, contact_email, established_date) VALUES
('Fashion Hub', 'Київ, вул. Хрещатик, 1', 'contact@fashionhub.ua', '2010-05-15'),('Style Point', 'Львів, пр. Свободи, 25', 'info@stylepoint.ua', '2015-08-22'),('Urban Wear', 'Одеса, вул. Дерибасівська, 10', 'sales@urbanwear.ua', '2018-11-30');

INSERT INTO "user" (username, password, email) VALUES
('ivan123', '$2a$10$yJougGA.V5UXeWMZ6qDQsep1ANpUuhOeloS3fqYDotN.ROY45/ihG', 'ivan@ua.example.com'),                                               ('maria456', '$2a$10$yJougGA.V5UXeWMZ6qDQsep1ANpUuhOeloS3fqYDotN.ROY45/ihG', 'maria@ua.example.com'),                                                   ('alex789', '$2a$10$yJougGA.V5UXeWMZ6qDQsep1ANpUuhOeloS3fqYDotN.ROY45/ihG', 'alex@ua.example.com');

-- пароль "test"
INSERT INTO role (name) VALUES
                            ('ROLE_USER'),
                            ('ROLE_ADMIN');

INSERT INTO user_role (user_id, role_id) VALUES
                                             (1, 1),
                                             (2, 1),
                                             (3, 2);

-- INSERT INTO "order" (user_id, store_id, total) VALUES
--                                                    (1, 1, 279.98),
--                                                    (2, 2, 149.99),
--                                                    (3, 3, 89.99);



CREATE TABLE IF NOT EXISTS deliveries (
    id SERIAL PRIMARY KEY,
    order_id INT NOT NULL,
    delivery_address VARCHAR(255),
    delivery_date DATE,
    delivery_type VARCHAR(50),
    status VARCHAR(50),
    FOREIGN KEY (order_id) REFERENCES "order"(id)
);

    INSERT INTO deliveries (order_id, delivery_address, delivery_date, delivery_type, status) VALUES
    (1, '123 Main St, Cityville', '2024-10-23', 'STANDARD', 'PENDING'),
    (2, '456 Elm St, Townsville', '2024-10-24', 'EXPRESS', 'IN_TRANSIT'),
    (3, '789 Maple St, Villagetown', '2024-10-25', 'STANDARD', 'DELIVERED');
